import random
import matplotlib.pyplot as plt

def dice_race(target1, target2):
    # Initialize players' distances and roll counts
    p1_distance = target1
    p2_distance = target2
    p1_rolls = 0
    p2_rolls = 0

    # Continue the game until both players reach or surpass their targets
    while p1_distance > 0 or p2_distance > 0:
        # Player 1's turn
        if p1_distance > 0:
            roll = random.randint(1, 6)
            p1_rolls += 1
            if roll <= p1_distance:
                p1_distance -= roll

        # Player 2's turn
        if p2_distance > 0:
            roll = random.randint(1, 6)
            p2_rolls += 1
            if roll <= p2_distance:
                p2_distance -= roll

    return p1_rolls, p2_rolls

def simulate_games(num_simulations, target1, target2):
    """Simulates games and returns win counts for each player."""
    p1_wins = 0
    p2_wins = 0
    ties = 0
    for _ in range(num_simulations):
        p1_rolls, p2_rolls = dice_race(target1, target2)
        if p1_rolls < p2_rolls:
            p1_wins += 1
        elif p2_rolls < p1_rolls:
            p2_wins += 1
        else:
            ties += 1
    return p1_wins, p2_wins, ties

def simulate_multiple_targets(num_simulations, target_pairs):
    """Simulates games for multiple target pairs and collects win probabilities."""
    results = []
    for target1, target2 in target_pairs:
        p1_wins, p2_wins, ties = simulate_games(num_simulations, target1, target2)
        total_wins = p1_wins + p2_wins
        p1_percentage = round((p1_wins / total_wins) * 100, 2)
        p2_percentage = round((p2_wins / total_wins) * 100, 2)
        results.append(((target1, target2), (p1_percentage, p2_percentage)))
    return results

def plot_results(results, title):
    labels = [f'{t1}-{t2}' for t1, t2 in [targets for targets, _ in results]]
    p1_wins = [prob[0] for _, prob in results]
    p2_wins = [prob[1] for _, prob in results]

    x = range(len(labels))

    fig, ax = plt.subplots()
    bar_width = 0.35

    ax.bar(x, p1_wins, bar_width, label='Player 1', color='blue')
    ax.bar([i + bar_width for i in x], p2_wins, bar_width, label='Player 2', color='orange')

    ax.set_xlabel('Target Pairs')
    ax.set_ylabel('Win Probability (%)')
    ax.set_title(title)
    ax.set_xticks([i + bar_width / 2 for i in x])
    ax.set_xticklabels(labels, rotation=45)
    ax.legend()

    plt.tight_layout()
    plt.show()

# Define multiple lists of target pairs
"""you can play around with this pairs and if you found something cool dont forget to email me about your finding i am also curious to know more of surprising findings"""
target_pairs_list_1 = [
    (6, 6),
    (6, 7),
    (6, 8),
    (6, 9),
    (6, 10),
    (6, 11),
    (6, 12)
]

target_pairs_list_2 = [
    (7, 8),
    (8, 9),
    (9, 10),
    (10, 11),
    (11, 12)
]

target_pairs_list_3 = [
    (6, 13),
    (6, 19),
    (6, 25),
    (6, 31),
    (6, 37),
    (6, 43),
    (6, 49)
]

target_pairs_list_4 = [
    (7, 12),
    (13, 18),
    (18, 24),
    (24, 30)
]

target_pairs_list_5 = [
    (6, 12),
    (12, 18),
    (18, 24),
    (24, 30),
    (30, 36)
]

# number of time to run the simulation 
num_simulations = 100000 #you can change it to dicrease or increase number of simulations   

results_list_1 = simulate_multiple_targets(num_simulations, target_pairs_list_1)
results_list_2 = simulate_multiple_targets(num_simulations, target_pairs_list_2)
results_list_3 = simulate_multiple_targets(num_simulations, target_pairs_list_3)
results_list_4 = simulate_multiple_targets(num_simulations, target_pairs_list_4)
results_list_5 = simulate_multiple_targets(num_simulations, target_pairs_list_5)

# Store results in a list
all_results = [results_list_1, results_list_2, results_list_3, results_list_4, results_list_5]

# Print results for each list
for i, results in enumerate(all_results, 1):
    print(f"Results for Target Pairs List {i}:")
    for targets, probabilities in results:
        print(f"Targets: {targets}, Probabilities: {probabilities}")
    print()

# Plot results for each list
plot_results(results_list_1, 'Dice Races: Win Probabilities for Target Pairs List 1')
plot_results(results_list_2, 'Dice Races: Win Probabilities for Target Pairs List 2')
plot_results(results_list_3, 'Dice Races: Win Probabilities for Target Pairs List 3')
plot_results(results_list_4, 'Dice Races: Win Probabilities for Target Pairs List 4')
plot_results(results_list_5, 'Dice Races: Win Probabilities for Target Pairs List 5')
